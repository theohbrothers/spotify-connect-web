name: ci-master-pr

on:
  push:
    branches:
    - master
    tags:
    - '**'
  pull_request:
    branches:
    - master

jobs:
  update-draft-release:
    # needs: [test]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      # Drafts your next Release notes as Pull Requests are merged into "master"
      - uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-draft-release:
    needs: [ build-docker-image ]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - id: release-drafter
      uses: release-drafter/release-drafter@v5
      with:
        # config-name: release-drafter.yaml
        publish: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker-image:
    runs-on: ubuntu-latest
    env:
      BUILD_DIR: '.'
    steps:
    - uses: actions/checkout@v1
    - name: Display system info (linux)
      run: |
        set -e
        hostname
        whoami
        cat /etc/*release
        lscpu
        free
        df -h
        pwd
        docker info
        docker version

    - name: Login to docker registry
      env:
        DOCKERHUB_REGISTRY_USER: ${{ github.repository_owner }}
        DOCKERHUB_REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_REGISTRY_PASSWORD }}
      run: echo "${DOCKERHUB_REGISTRY_PASSWORD}" | docker login -u "${DOCKERHUB_REGISTRY_USER}" --password-stdin

    - name: Set up Docker Buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest

    - id: resolve_docker_image_tags
      name: Resolve docker image tags
      run: |
        set -e

        # Get 'namespace' and 'project-name' from 'namespace/project-name'
        CI_PROJECT_NAMESPACE=$( echo "${GITHUB_REPOSITORY}" | cut -d '/' -f 1 )
        CI_PROJECT_NAME=$( echo "${GITHUB_REPOSITORY}" | cut -d '/' -f 2 )

        # Get 'ref-name' from 'refs/heads/ref-name'
        REF=$( echo "${GITHUB_REF}" | rev | cut -d '/' -f 1 | rev )
        SHA_SHORT=$( echo "${GITHUB_SHA}" | cut -c1-7 )

        # Generate the final tags. E.g. 'release-v1.0.0' and 'release-b29758a-v1.0.0'
        REF_AND_SHA_SHORT="${REF}-${SHA_SHORT}"

        # Set step output(s)
        echo "::set-output name=CI_PROJECT_NAMESPACE::$CI_PROJECT_NAMESPACE"
        echo "::set-output name=CI_PROJECT_NAME::$CI_PROJECT_NAME"
        echo "::set-output name=REF::$REF"
        echo "::set-output name=SHA_SHORT::$SHA_SHORT"
        echo "::set-output name=REF_AND_SHA_SHORT::$REF_AND_SHA_SHORT"

    - name: Build (PRs)
      # Run only on pull requests
      if: (! (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')) )
      run: |
        # Build
        docker buildx build --platform linux/arm64 \
          -t "${GITHUB_REPOSITORY}:${{ steps.resolve_docker_image_tags.outputs.REF }}" \
          -t "${GITHUB_REPOSITORY}:${{ steps.resolve_docker_image_tags.outputs.REF_AND_SHA_SHORT }}" \
          --output "type=image,push=false" \
          "${BUILD_DIR}"

        # List
        docker images

    - name: Build and push (master)
      if: github.ref == 'refs/heads/master'
      run: |
        # Build
        docker buildx build --platform linux/arm64 \
          -t "${GITHUB_REPOSITORY}:${{ steps.resolve_docker_image_tags.outputs.REF }}" \
          -t "${GITHUB_REPOSITORY}:${{ steps.resolve_docker_image_tags.outputs.REF_AND_SHA_SHORT }}" \
          --output "type=image,push=true" \
          "${BUILD_DIR}"

        # List
        docker images

    - name: Build and push (release)
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        # Build
        docker buildx build --platform linux/arm64 \
          -t "${GITHUB_REPOSITORY}:${{ steps.resolve_docker_image_tags.outputs.REF }}" \
          -t "${GITHUB_REPOSITORY}:${{ steps.resolve_docker_image_tags.outputs.REF_AND_SHA_SHORT }}" \
          -t "${GITHUB_REPOSITORY}:latest" \
          --output "type=image,push=true" \
          "${BUILD_DIR}"

    - name: List docker
      run: |
        # List
        docker images

    - name: Clean-up
      run: docker logout
      if: always()
